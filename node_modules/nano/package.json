{
  "name": "nano",
  "description": "minimalistic couchdb driver for node.js",
  "homepage": "http://github.com/dscape/nano",
  "repository": {
    "type": "git",
    "url": "git://github.com/dscape/nano"
  },
  "version": "1.3.37",
  "author": {
    "name": "Nuno Job",
    "email": "nunojobpinto@gmail.com",
    "url": "http://nunojob.com"
  },
  "contributors": [
    {
      "name": "Thiago Arrais",
      "email": "thiago.arrais@gmail.com",
      "url": "http://thiagoarrais.com"
    },
    {
      "name": "Derek Perez",
      "email": "derek@derekperez.com",
      "url": "http://blog.derekperez.com"
    },
    {
      "name": "Patrick Heneise",
      "url": "http://patrickheneise.me"
    },
    {
      "name": "Artur Konarski",
      "url": "http://tarantoga.com"
    },
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com",
      "url": "http://metaduck.com"
    },
    {
      "name": "Tom Wilson",
      "email": "tom@jackhq.com",
      "url": "http://jackhq.tumblr.com"
    },
    {
      "name": "Dale Harvey",
      "email": "dale@arandomurl.com",
      "url": "http://arandomurl.com"
    },
    {
      "name": "Jan Lehnardt",
      "email": "jan@apache.org",
      "url": "http://jan.prima.de/plok/"
    },
    {
      "name": "InTheFiveByFive"
    },
    {
      "name": "StÃ©phane Alnet",
      "email": "stephane@shimaore.net",
      "url": "http://blog.shimaore.net"
    }
  ],
  "keywords": [
    "couchdb",
    "data",
    "request",
    "json",
    "nosql",
    "micro",
    "nano",
    "database"
  ],
  "dependencies": {
    "request": "2.9.x"
  },
  "devDependencies": {
    "async": "0.1.15",
    "ensure": "0.4.6",
    "nock": "0.5.5",
    "tap-runner": "0.0.7",
    "tap-producer": "0.0.1",
    "tap": "0.1.3",
    "inherits": "1.0.0",
    "yamlish": "0.0.2",
    "slide": "1.1.3",
    "underscore": "1.3.1"
  },
  "scripts": {
    "test": "./node_modules/ensure/bin/tap.js tests/*/*.js"
  },
  "main": "./nano.js",
  "engines": {
    "node": ">=0.3.6"
  },
  "readme": "# nano\n\n`nano` (short for `nanocouch`) is a minimalistic `couchdb` driver for `node.js`\n\n# installation\n\n1. install [npm][1]\n2. `npm install nano`\n\n# usage\n\n``` js\n  var nano = require('nano')('http://localhost:5984');\n```\n\nwithin the `nano` variable you have various methods you can call. these include tasks like create, delete or list databases:\n\n``` js\n  nano.db.create(\"alice\");\n```\n\nin this function there is not callback. in `nano` the absence of callback means \"do this, ignore what happens\"\n\nyou normally don't want to do that though:\n\n``` js\n  // clean up the database we created previously\n  nano.db.destroy(\"alice\", function() {\n    nano.db.create(\"alice\", function() {\n      // specify the database we are going to use\n      var alice = nano.use(\"alice\");\n      alice.insert({crazy: true}, \"rabbit\", function(e,b,h){\n        if(e) { throw e; }\n        console.log(\"you have inserted the rabbit.\")\n      });\n    });\n  });\n```\n\nthe `nano.use` method creates a `scope` where you operate inside a single database. this is just a convenience so you don't have to specify the database name every single time you do an update or delete\n\n``` js\n  // 5: var alice = nano.use(\"alice\");\n```\n\nin `nano` *a callback has always the same three arguments*\n\n``` js\n  // 6: alice.insert({crazy: true}, \"rabbit\", function(e,b,h) {\n  // 7:   if(e) { throw e; }\n  // 8:   console.log(\"you have inserted the rabbit.\")\n  // 9: });\n```\n\nmeaning:\n\n      e: the `error`, if any\n      b: the http `response body` from couchdb, if no error. json parsed body, binary for non-json responses\n      h: the http response `headers` from couchdb, if no error\n\nerrors include responses from couchdb which had a non 200 response code. that's it. don't forget to delete the database you created:\n\n``` js\n  nano.db.destroy(\"alice\");\n```\n\n# tutorials & screencasts\n\n* screencast: [couchdb and nano](http://nodetuts.com/tutorials/30-couchdb-and-nano.html#video)\n* article: [nano - a minimalistic couchdb client for nodejs](http://writings.nunojob.com/2011/08/nano-minimalistic-couchdb-client-for-nodejs.html)\n* article: [getting started with node.js and couchdb](http://writings.nunojob.com/2011/09/getting-started-with-nodejs-and-couchdb.html)\n* article: [Document Update Handler Support](http://jackhq.tumblr.com/post/16035106690/nano-v1-2-x-document-update-handler-support-v1-2-x)\n\n# interfaces\n\n`*` marks optional\n`params` are additional querystring parameters\n\n## databases, et al\n\n### functions\n\n`server.db.create(db_name,callback*)`\n`server.db.get(db_name,callback*)`\n`server.db.destroy(db_name,callback*)`\n`server.db.list(callback*)`\n`server.db.compact(db_name,design_name*,callback*)`\n`server.db.replicate(source,target,continuous*,callback*)`\n`server.db.changes(db_name,params*,callback*)`\n`server.use(db_name)`\n`server.request(opts,callback*)`\n`server.config`\n\n### aliases\n\n`nano.use: [nano.db.use, nano.db.scope, nano.scope]`\n`nano.request: [nano.relax, nano.dinosaur]`\n\n## documents, attachments, views, et al\n\n### functions\n\n`db.insert(doc,doc_name*,callback*)`\n`db.destroy(doc_name,rev,callback*)`\n`db.get(doc_name,params*,callback*)`\n`db.bulk(docs,params*,callback*)`\n`db.list(params*,callback*)`\n`db.fetch(doc_names,params*,callback*)`\n`db.view(design_name,view_name,params*,callback*)`\n`db.attachment.insert(doc_name,att_name,att,content_type,params*,callback*)`\n`db.attachment.get(doc_name,att_name,params*,callback*)`\n`db.attachment.destroy(doc_name,att_name,rev,callback*)`\n`db.updateWithHandler(design_name, update_name, doc_name, params*, callback*)`\n\n### aliases\n\n`nano.use` sets `db_name` in scope so you don't have to specify it every time\n\n`server.db.get: [db.info(callback*)]`\n`server.db.replicate: [db.replicate(target,continuous*,callback*)]`\n`server.db.compact:  [db.compact(callback*), db.view.compact(design_name,callback*)]`\n`server.db.changes: [db.changes(params*,callback*)]`\n`server.config: [db.config]`\n\n## advanced\n\n`nano` is minimalistic so it provides advanced users with a way to code their own extension functions:\n\n``` js\n  nano.request(opts,callback*)\n```\n\nto get a document in a specific rev an advanced user might do:\n\n``` js\n  nano.request( { db: \"alice\"\n                , doc: \"rabbit\"\n                , method: \"GET\"\n                , params: { rev: \"1-967a00dff5e02add41819138abb3284d\"}\n                },\n    function (_,b) { console.log(b) });\n```\n\nthis is the same as (assuming `alice = require('nano')('http://localhost:5984/alice')`):\n\n``` js\n  alice.get(\"rabbit\", {rev: \"1-967a00dff5e02add41819138abb3284d\"},\n    function (_,b) { console.log(b) });\n```\n\n### pipe\n\nyou can pipe in `nano` just like you do in any other stream. this is available in all methods:\n\n``` js\n  alice.attachment.get(\"breakfast\", \"sugar\", {rev: rev})\n    .pipe(fs.createWriteStream(\"/tmp/sugar-for-rabbit\"));\n```\n\n# roadmap\n\ncheck [issues][2]\n\n# contribute\n\neveryone is welcome to contribute. patches, bugfixes, new features\n\n1. create an [issue][2] on github so the community can comment on your idea\n2. fork `nano` in github\n3. create a new branch `git checkout -b my_branch`\n4. create tests for the changes you made\n5. make sure you pass both existing and newly inserted tests\n6. commit your changes\n7. push to your branch `git push origin my_branch`\n8. create an pull request\n\n# tests\n\nto run (and configure) the test suite simply:\n\n``` sh\n  cd nano\n  vi cfg/tests.js\n  npm install # should install ensure and async, if it doesnt install manually\n  npm test\n```\n\nafter adding a new test you can run it individually (with verbose output) using:\n\n``` sh\n  NANO_ENV=testing node tests/doc/list.js list_doc_params\n```\n\nwhere `list_doc_params` is the test name.\n\n# meta\n\n                    _\n                  / _) ROAR! i'm a vegan!\n           .-^^^-/ /\n        __/       /\n       /__.|_|-|_|     cannes est superb\n\n* code: `git clone git://github.com/dscape/nano.git`\n* home: <http://github.com/dscape/nano>\n* bugs: <http://github.com/dscape/nano/issues>\n* build: [![build status](https://secure.travis-ci.org/dscape/nano.png)](http://travis-ci.org/dscape/nano)\n\n`(oO)--',-` in [caos][3]\n\n[1]: http://npmjs.org\n[2]: http://github.com/dscape/nano/issues\n[3]: http://caos.di.uminho.pt/\n[4]: https://github.com/dscape/nano/blob/master/cfg/couch.example.js\n",
  "readmeFilename": "README.md",
  "_id": "nano@1.3.37",
  "dist": {
    "shasum": "aca8e802d659e0e68faadc423c6900848e0687e4"
  },
  "_from": "nano@1.3.37"
}
