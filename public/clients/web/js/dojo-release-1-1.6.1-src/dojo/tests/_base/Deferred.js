dojo.provide("tests._base.Deferred");var delay=function(a){var b=new dojo.Deferred;a=a||20,setTimeout(function(){b.progress(.5)},a/2),setTimeout(function(){b.resolve()},a);return b.promise};doh.register("tests._base.Deferred",[function callback(a){var b=new dojo.Deferred,c=0;b.addCallback(function(a){doh.debug("debug from dojo.Deferred callback");return a}),b.addCallback(function(a){c+=a;return c}),b.callback(5),a.assertEqual(c,5)},function callback_extra_args(a){var b=new dojo.Deferred,c=0;b.addCallback(dojo.global,function(a,b){c+=a,c+=b;return c},30),b.callback(5),a.assertEqual(c,35)},function errback(a){var b=new dojo.Deferred,c=0;b.addErrback(function(a){return++c}),b.errback(),a.assertEqual(c,1)},function callbackTwice(a){var b=new dojo.Deferred,c=0;b.addCallback(function(a){return++c}),b.callback(),a.assertEqual(c,1);var d=!1;try{b.callback()}catch(e){d=!0}a.assertTrue(d)},function addBoth(a){var b=new dojo.Deferred,c=0;b.addBoth(function(a){return++c}),b.callback(),a.assertEqual(c,1)},function callbackNested(a){var b=new dojo.Deferred,c="yellow";b.addCallback(function(a){b.addCallback(function(a){c=a});return"blue"}),b.callback("red"),a.assertEqual("blue",c)},function simpleThen(a){var b=new doh.Deferred;delay().then(function(){b.callback(!0)});return b},function thenChaining(a){var b=new doh.Deferred,c=delay(),d=c.then(function(){return 1});p3=d.then(function(){return 2}),p3.then(function(){d.then(function(c){a.assertEqual(c,1),p3.then(function(c){a.assertEqual(c,2),b.callback(!0)})})});return b},function simpleWhen(a){var b=new doh.Deferred;dojo.when(delay(),function(){b.callback(!0)});return b},function progress(a){var b=new doh.Deferred,c;dojo.when(delay(),function(){a.is(c,.5),b.callback(!0)},function(){},function(a){c=a});return b},function errorHandler(a){var b=new dojo.Deferred,c;dojo.config.deferredOnError=function(a){c=a},b.reject(new Error("test")),a.t(c instanceof Error)},function cancelThenDerivative(a){var b=new dojo.Deferred,c=b.then();try{c.cancel(),a.t(!0)}catch(d){a.t(!1)}},function cancelPromiseValue(a){var b,c=new dojo.Deferred(function(a){b=a});c.promise.cancel(),a.is(c,b)},function errorResult(a){var b=new dojo.Deferred,c=new Error("rejected");b.reject(c),a.is(b.fired,1),a.is(b.results[1],c)},function globalLeak(a){var b=new dojo.Deferred;b.then(function(){return b}),b.resolve(!0),a.is(dojo.global.results,undefined,"results is leaking into global"),a.is(dojo.global.fired,undefined,"fired is leaking into global")},function backAndForthProcess(a){var b=new dojo.Deferred,c="fail";b.addErrback(function(){return"ignore error and throw this good string"}).addCallback(function(){throw new Error("error1")}).addErrback(function(){return"ignore second error and make it good again"}).addCallback(function(){c="succeed"}),b.errback(""),a.assertEqual("succeed",c)},function backAndForthProcessThen(a){var b=new dojo.Deferred,c="fail";b.then(null,function(){return"ignore error and throw this good string"}).then(function(){throw"error1"}).then(null,function(){return"ignore second error and make it good again"}).then(function(){c="succeed"}),b.reject(""),a.assertEqual("succeed",c)},function returnErrorObject(a){var b=new dojo.Deferred,c="fail";b.addCallback(function(){return new Error("returning an error should work same as throwing")}).addErrback(function(){c="succeed"}),b.callback(),a.assertEqual("succeed",c)},function returnErrorObjectThen(a){var b=new dojo.Deferred,c="fail";b.then(function(){return new Error("returning an error should NOT work same as throwing")}).then(function(){c="succeed"}),b.resolve(),a.assertEqual("succeed",c)},function errbackWithPromise(a){var b=new dojo.Deferred,c;b.addCallbacks(function(){},function(a){return a}),b.promise.then(function(){c="fail"},function(){c="succeed"}),b.errback(new Error),a.assertEqual("succeed",c)}])